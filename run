#!/usr/bin/env bash

root="http://10.0.0.1:5000/rootDesc.xml"
label="portical.upnp.forward"
verbose=0  # 0 for silent, 1 for verbose

function run_cmd() {
    if [[ $verbose -eq 1 ]]; then
        "$@"  # Execute the command normally
    else
        "$@" > /dev/null 2>&1  # Discard both stdout and stderr
    fi
}

function forward() {
  local network_driver=$1
  local external_port=$2
  local internal_port=$3
  local protocol=$4
  local machine=$5
  local description="portical: ${machine}(${external_port}:${internal_port}/${protocol})"

  echo "Setting up ${description}..."

  case $network_driver in
    macvlan | ipvlan)
      local network="container:${machine}"
      ;;

    host | bridge)
      local network="host"
      ;;

    *)
      echo "Unsupported network driver: ${network_driver}. Skipping..."
      return
      ;;
  esac

  echo -n "Removing existing rule (if exists)... "
  run_cmd docker run --rm --network ${network} danielbodart/portical \
    upnpc -u "${root}" -d "${external_port}" "${protocol}"
  echo "DONE"

  echo -n "Adding new rule... "
  run_cmd docker run --rm --network ${network} danielbodart/portical \
    upnpc -u "${root}" -e "${description}" -r "${internal_port}" "${external_port}" "${protocol}"
  echo "DONE"

}


function extract_rule() {
  local regex="${label//./\\.}:([0-9]+):([0-9]+)(/(tcp|udp))?"

  if [[ $1 =~ $regex ]]; then
      external_port="${BASH_REMATCH[1]}"
      internal_port="${BASH_REMATCH[2]}"
      protocol="${BASH_REMATCH[4]}"
  fi
}

function find() {
  echo "Finding all containers with label '${label}' set..."
  docker ps --filter "label=${label}" --format '{{.Names}}' | while read container; do
    labels=$(docker inspect -f '{{.Config.Labels}}' "$container")
    network_name=$(docker inspect -f '{{range $key, $_ := .NetworkSettings.Networks}}{{ $key }}{{end}}' "$container")
    network_driver=$(docker network inspect -f '{{.Driver}}' "$network_name")

    extract_rule "${labels}"

    if [[ $protocol == "" ]]; then
      forward $network_driver $external_port $internal_port tcp $container
      forward $network_driver $external_port $internal_port udp $container
    else
      forward $network_driver $external_port $internal_port $protocol $container
    fi
  done

  echo "All portical rules:"
  upnpc -u "${root}" -l | grep portical
}


command="${1-find}"
set +e; shift;
$command "$@"