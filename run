#!/usr/bin/env bash

root=${PORTICAL_UPNP_ROOT_URL}
duration=${PORTICAL_POLL_INTERVAL-15}
label="portical.upnp.forward"
verbose=false

while (( "$#" )); do
  case $1 in
    -r | --root) root="$2"; shift 2 ;;
    -d | --duration) duration="$2"; shift 2 ;;
    -l | --label) label="$2"; shift 2 ;;
    -v | --verbose) verbose=true; shift ;;
    *) break ;;
  esac
done


function run_cmd() {
    if $verbose; then
        "$@"
    else
        "$@" > /dev/null 2>&1
    fi

    local status=$?
    if [ $status -ne 0 ]; then
        echo "Error: Command '$*' failed with status $status"
        exit $status
    fi
}

function forward() {
  local network_driver=$1
  local external_port=$2
  local internal_port=$3
  local protocol=$4
  local machine=$5
  local description="portical: ${machine}(${external_port}:${internal_port}/${protocol})"

  echo "Setting up ${description}..."

  case $network_driver in
    macvlan | ipvlan)
      local network="container:${machine}"
      ;;

    host | bridge)
      local network="host"
      ;;

    *)
      echo "Unsupported network driver: ${network_driver}. Skipping..."
      return
      ;;
  esac

  echo -n "Removing existing rule (if exists)... "
  run_cmd docker run --rm --network ${network} danielbodart/portical \
    upnpc ${root:+-u "$root"} -d "${external_port}" "${protocol}"
  echo "DONE"

  echo -n "Adding new rule... "
  run_cmd docker run --rm --network ${network} danielbodart/portical \
    upnpc ${root:+-u "$root"} -e "${description}" -r "${internal_port}" "${external_port}" "${protocol}"
  echo "DONE"

}

function extract_rule() {
  local regex="${label//./\\.}:([0-9]+):([0-9]+)(/(tcp|udp))?"

  if [[ $1 =~ $regex ]]; then
      external_port="${BASH_REMATCH[1]}"
      internal_port="${BASH_REMATCH[2]}"
      protocol="${BASH_REMATCH[4]}"
  fi
}

function update() {
  echo "Finding all containers with label '${label}' set..."
  docker ps --filter "label=${label}" --format '{{.Names}}' | while read container; do
    labels=$(docker inspect -f '{{.Config.Labels}}' "$container")
    network_name=$(docker inspect -f '{{range $key, $_ := .NetworkSettings.Networks}}{{ $key }}{{end}}' "$container")
    network_driver=$(docker network inspect -f '{{.Driver}}' "$network_name")

    extract_rule "${labels}"

    if [[ $protocol == "" ]]; then
      forward $network_driver $external_port $internal_port tcp $container
      forward $network_driver $external_port $internal_port udp $container
    else
      forward $network_driver $external_port $internal_port $protocol $container
    fi
  done

  echo "All portical rules:"
  upnpc -u "${root}" -l | grep portical
}

function poll() {
  while true; do
    update
    echo "Sleeping for ${duration} seconds..."
    sleep ${duration}
  done
}


command="${1-update}"
shift

if declare -f "$command" > /dev/null; then
  set +e
  "$command" "$@"
else
  echo "Error: '$command' is not a valid command." >&2
  exit 1
fi